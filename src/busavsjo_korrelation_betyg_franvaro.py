import pandas as pd
import numpy as np
import json
from pathlib import Path
from config_paths import DATA_MAPP, JSON_MAPP, LASAR

BETYGSFILER = {
    "6": DATA_MAPP / f"betyg_ak6.xlsx",
    "9": DATA_MAPP / f"betyg_ak9.xlsx",
}

FRANVARO_FIL = DATA_MAPP / "franvaro_total.xlsx"

FRANVAROTYPER = {
    "ogiltig_franvaro_pct": "Ogiltig fr√•nvaro (%)",
    "total_franvaro_pct": "Total fr√•nvaro (%)"
}

def spara_json(df, filnamn, √•rskurs):
    (JSON_MAPP).mkdir(parents=True, exist_ok=True)
    df_clean = df.copy()

    # Runda korrelationer endast om de √§r giltiga
    df_clean["Korrelation"] = df_clean["Korrelation"].apply(
        lambda x: round(float(x), 2)
        if isinstance(x, (int, float, np.floating)) and not np.isnan(x)
        else None
    )

    # Ers√§tt eventuella kvarvarande NaN med None
    df_clean = df_clean.applymap(lambda x: None if pd.isna(x) else x)

    # L√§gg till metadata
    df_clean["L√§s√•r"] = LASAR
    df_clean["√Örskurs"] = √•rskurs

    with (JSON_MAPP / filnamn).open("w", encoding="utf-8") as f:
        json.dump(
            df_clean.to_dict(orient="records"),
            f,
            indent=2,
            ensure_ascii=False,
            default=lambda x: None,  # Hantera t.ex. np.float32 och NaN
            allow_nan=False,
        )

def analysera_korrelation(klass_varde, betyg_df):
    √§mnen_ak6 = ["BI", "En", "Hkk", "idh", "Ma", "mu", "No", "So", "Sv", "Sva", "Tk"]
    √§mnen_ak9 = ["BI", "En", "Hkk", "idh", "Ma", "mu", "Bi", "Fy", "Ke", "Ge", "Hi", "Re", "Sh", "SI", "Sv", "Sva", "Tn", "Tk"]
    √§mnen = √§mnen_ak6 if klass_varde == "6" else √§mnen_ak9

    betygsskala = {
        "A": 20,
        "B": 17.5,
        "C": 15,
        "D": 12.5,
        "E": 10,
        "F": 0,
    }

    franvaro_df = pd.read_excel(FRANVARO_FIL)
    df = pd.merge(betyg_df, franvaro_df, on="PersonNr", how="inner")

    for √§mne in √§mnen:
        if √§mne in df.columns:
            df[√§mne] = df[√§mne].replace(["2", "3"], np.nan)  # filtrera bort specialkoder
            df[√§mne] = pd.to_numeric(df[√§mne].replace(betygsskala), errors="coerce").astype("float32")

    for franvarotyp, beskrivning in FRANVAROTYPER.items():
        resultat = []  # Rensas per typ
        for √§mne in √§mnen:
            if √§mne in df.columns:
                delm√§ngd = df[[√§mne, franvarotyp]].dropna()
                if not delm√§ngd.empty and delm√§ngd[franvarotyp].nunique() > 1 and delm√§ngd[√§mne].nunique() > 1:
                    korrelation = delm√§ngd[√§mne].corr(delm√§ngd[franvarotyp])
                    if pd.isna(korrelation):
                        korrelation = None
                else:
                    korrelation = None

                styrka = styrkebed√∂mning(korrelation)
                resultat.append({
                    "√Ñmne": √§mne,
                    "Fr√•nvarotyp": franvarotyp,
                    "Korrelation": korrelation,
                    "Styrka": styrka
                })

        df_resultat = pd.DataFrame(resultat)
        filnamn = f"{franvarotyp}_ak{klass_varde}.json".replace("√•", "a").replace("√§", "a").replace("√∂", "o")
        spara_json(df_resultat, filnamn, √•rskurs=klass_varde)
        print(f"üìÑ Sparade {filnamn} med {len(df_resultat)} rader.")

def styrkebed√∂mning(k):
    if k is None:
        return "saknas"
    k_abs = abs(k)
    if k_abs < 0.1:
        return "ingen"
    elif k_abs < 0.3:
        return "svag"
    elif k_abs < 0.5:
        return "m√•ttlig"
    elif k_abs < 0.7:
        return "stark"
    else:
        return "mycket stark"

def ber√§kna_och_spara_meritv√§rde(df, √•rskurs: str, ursprungsfil: Path):
    betygsskala = {"A": 20, "B": 17.5, "C": 15, "D": 12.5, "E": 10, "F": 0}
    spr√•kvalskolumner = ["M1(betyg)", "M2(betyg)"]
    icke_betygskolumner = ["PersonNr", "Namn", "Klass"] + spr√•kvalskolumner

    betygskolumner = [col for col in df.columns if col not in icke_betygskolumner and df[col].isin(betygsskala.keys()).any()]

    meritv√§rden = []
    for _, rad in df.iterrows():
        betygspo√§ng = []
        for √§mne in betygskolumner:
            betyg = rad.get(√§mne)
            po√§ng = betygsskala.get(str(betyg).strip(), 0)
            betygspo√§ng.append(po√§ng)

        har_spr√•kval = False
        for kolumn in spr√•kvalskolumner:
            betyg = rad.get(kolumn)
            if isinstance(betyg, str) and betyg.strip() in betygsskala and betyg != "F":
                har_spr√•kval = True
                break

        max_antal = 17 if har_spr√•kval else 16
        po√§ng_summa = sum(sorted(betygspo√§ng, reverse=True)[:max_antal])
        meritv√§rden.append(po√§ng_summa)

    df["Meritv√§rde"] = meritv√§rden
    ny_fil = ursprungsfil.parent / ursprungsfil.name.replace(".xlsx", "_med_merit.xlsx")
    df.to_excel(ny_fil, index=False)
    print(f"üíæ Sparade {ny_fil.name} med kolumnen 'Meritv√§rde'.")

if __name__ == "__main__":
    for √•rskurs, betygfil in BETYGSFILER.items():
        if not betygfil.exists():
            print(f"‚ö†Ô∏è Betygsfil f√∂r √•rskurs {√•rskurs} saknas: {betygfil.name}")
            continue
        print(f"üóìÔ∏è L√§ser betyg f√∂r √•rskurs {√•rskurs} fr√•n {betygfil.name}")
        betyg_df = pd.read_excel(betygfil)

        # L√§gg till meritv√§rde och spara ny fil
        ber√§kna_och_spara_meritv√§rde(betyg_df, √•rskurs, betygfil)

        # L√§s om den nya filen
        ny_betygfil = betygfil.parent / betygfil.name.replace(".xlsx", "_med_merit.xlsx")
        betyg_df_med_merit = pd.read_excel(ny_betygfil)

        # K√∂r analys
        analysera_korrelation(√•rskurs, betyg_df_med_merit)

